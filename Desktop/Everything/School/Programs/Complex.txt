class Complex{

   //--------------------------------------------------------------------------
   // Private Data Fields 
   //--------------------------------------------------------------------------
   private double re;
   private double im;
   
   //--------------------------------------------------------------------------
   // Public Constant Fields 
   //--------------------------------------------------------------------------
   public static final Complex ONE = Complex.valueOf(1,0);
   public static final Complex ZERO = Complex.valueOf(0,0);
   public static final Complex I = Complex.valueOf(0,1);

   //--------------------------------------------------------------------------
   // Constructors 
   //--------------------------------------------------------------------------
   Complex(double a, double b){
      this.re = a;
      this.im = b;
   }

   Complex(double a){
      this.re = a;
      this.im = 0;
   }

   Complex(String s){
      // Fill in this constructor.
      // It should accept expressions like "-2+3i", "2-3i", "3", "5i", etc.
      // Throw a NumberFormatException if s cannot be parsed as Complex.
	  double[] part = new double[2];
      String hello = s.trim();
      String NUM = "(\\d+\\.\\d*|\\.?\\d+)";
      String SGN = "[+-]?";
      String OP =  "\\s*[+-]\\s*";
      String I =   "i";
      String OR =  "|";
      String REAL = SGN+NUM;
      String IMAG = SGN+NUM+"?"+I;
      String COMP = REAL+OR+
                    IMAG+OR+
                    REAL+OP+NUM+"?"+I;
      
      if( !s.matches(COMP) ){
         throw new NumberFormatException(
                   "Cannot parse input string \""+s+"\" as Complex");
      }
      s = s.replaceAll("\\s","");     
      if( s.matches(REAL) ){
         part[0] = Double.parseDouble(s);
         part[1] = 0;
      }else if( s.matches(SGN+I) ){
         part[0] = 0;
         part[1] = Double.parseDouble( s.replace( I, "1.0" ) );
      }else if( s.matches(IMAG) ){
         part[0] = 0;
         part[1] = Double.parseDouble( s.replace( I , "" ) );
      }else if( s.matches(REAL+OP+I) ){
         part[0] = Double.parseDouble( s.replaceAll( "("+REAL+")"+OP+".+" , "$1" ) );
         part[1] = Double.parseDouble( s.replaceAll( ".+("+OP+")"+I , "$1"+"1.0" ) );
      }else{   //  s.matches(REAL+OP+NUM+I) 
         part[0] = Double.parseDouble( s.replaceAll( "("+REAL+").+"  , "$1" ) );
         part[1] = Double.parseDouble( s.replaceAll( ".+("+OP+NUM+")"+I , "$1" ) );
      }
      this.re = part[0];
	  this.im = part[1];
   }

   //---------------------------------------------------------------------------
   // Public methods 
   //---------------------------------------------------------------------------

   // Complex arithmetic -------------------------------------------------------

   // copy()
   // Return a new Complex equal to this Complex
   Complex copy(){
      // Fill in
	  double re;
	  double im;
	  re = this.re;
	  im = this.im;
	  return new Complex(re,im);
   }
   
   // add()
   // Return a new Complex representing the sum this plus z.
   Complex add(Complex z){
      // Fill in z + w = (a + c) + (b + d)i
	  double re;
	  double im;
	  re=this.re+z.re;
	  im=this.im+z.im;
	  return new Complex(re,im);
   }
   
   // negate()
   // Return a new Complex representing the negative of this.
   Complex negate(){
      // Fill in
	  double re;
	  double im;
	  re = -this.re;
	  im = -this.im;
	  return new Complex(re,im);
   }

   // sub()
   // Return a new Complex representing the difference this minus z.
   Complex sub(Complex z){
      // Fill in
	  double re;
	  double im;
	  re=this.re-z.re;
	  im=this.im=z.im;
	  return new Complex(re,im);
   }

   // mult()
   // Return a new Complex representing the product this times z.
   Complex mult(Complex z){
      // Fill in
	  double re;
	  double im;
	  a=this.re*z.re;
	  b=this.im*z.im;
	  c=this.re*z.im;
	  d=this.im*z.re;
	  re=a-b;
	  im=c+d;
	  return new Complex(re,im);
   }

   // recip()
   // Return a new Complex representing the reciprocal of this.
   // Throw an ArithmeticException with appropriate message if 
   // this.equals(Complex.ZERO).
   Complex recip(){
      // Fill in (1/z)=(a/(a^2+b^2))+(-b/(a^2+b^2))
	  if (this.equals(Complex.ZERO)){
		throw new AritmeticException("aaaaaa");
	  }else{
		a=this.re;
		b=-this.im;
		c=Math.pow(this.re,2);
		d=Math.pow(this.im,2);
		re=a/(c+d);
		im=b/(c+d);
		return new Complex(re,im);
	  }
   }

   // div()
   // Return a new Complex representing the quotient of this by z.
   // Throw an ArithmeticException with appropriate message if 
   // z.equals(Complex.ZERO).
   Complex div(Complex z){
      // Fill in
	  if(z.equals(Complex.ZERO)){
		throw new ArithmeticException("bbbbbbbbb");
		}else{
		  a=this.re*z.re;
		  b=this.im*z.im;
		  c=this.im*z.re;
		  d=this.re*z.im;
		  e=Math.pow(z.re,2);
		  f=Math.pow(z.im,2);
		  re=(a+b)/(e+f);
		  im=(c-d)/(e+f);
		  return new Complex(re,im);
	  }
   }

   // conj()
   // Return a new Complex representing the conjugate of this Complex.
   Complex conj(){
      // Fill in
	  double re;
	  double im;
	  re=this.re;
	  im=-this.im;
	  return new Complex(re,im);
   }
   
   // Re()
   // Return the real part of this.
   double Re(){
      return re;
   }

   // Im()
   // Return the imaginary part of this.
   double Im(){
      return im;
   }

   // abs()
   // Return the modulus of this Complex, i.e. the distance between 
   // points (0, 0) and (re, im).
   double abs(){
      // Fill in
	  double re;
	  double im;
	  re=Math.pow(this.re,2);
	  im=Math.pow(this.im,2);
	  return Math.sqrt(re+im);
   }

   // arg()
   // Return the argument of this Complex, i.e. the angle this Complex
   // makes with positive real axis.
   double arg(){
      return Math.atan2(im, re);
   }

   // Other functions ---------------------------------------------------------
   
   // toString()
   // Return a String representation of this Complex.
   // The String returned will be readable by the constructor Complex(String s)
   public String toString(){
      // Fill in
	  if (this.re==0){
		return (this.im+"i");
	  }else if(this.im>0){
	    if (this.re !=0){
		   return (this.re+"+"+this.im+"i");
	    }
	  }else if(this.im<0){
	    if (this.re !=0){
			return (+this.re+"-"+(-this.im)+"i");
		}
	  }else{
		if (this.re!=0){
			return this.re+" ";
			}
	  }
   }

   // equals()
   // Return true iff this and obj have the same real and imaginary parts.
   public boolean equals(Object obj){
      // Fill in
	  Complex z;
	  z= (Complex) obj;
	  boolean a=false;
	  if (this.re==z.re){
		if (this.im==z.re){
			a=true;
		}
	  }
	  return a;
   }

   // valueOf()
   // Return a new Complex with real part a and imaginary part b.
   static Complex valueOf(double a, double b){
      // Fill in
	  return new Complex(a,b);
   }

   // valueOf()
   // Return a new Complex with real part a and imaginary part 0.
   static Complex valueOf(double a){
      // Fill in
	  return new Complex(a);
   }

   // valueOf()
   // Return a new Complex constructed from s.
   static Complex valueOf(String s){
      // Fill in
	  return new Complex(s);
   }

}