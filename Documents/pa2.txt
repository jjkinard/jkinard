import java.io.*;
import java.util.*;

public class Search{

    public static void main(String[] args) throws IOException{
        Scanner in = null;
        String line = null;
        String[] temp = new String[1000];
        String[] word = null;
        int lineNumber = 0;
        int[] countLineNumbers = null;
		
		//if less than 2 things are put into the commandline
        if (args.length < 2){
            System.out.println("Usage: Search file target1 [target2...]");
            System.exit(1);
        }
        try{
            in = new Scanner(new File(args[0]));
        }
        catch(IOException e){
            System.out.println("Unable to open file: " + args[0]);
            return;
        } 
        while (in.hasNextLine()){
            in.nextLine();
            lineNumber++;
        }
        in.close();

        try{
            in = new Scanner(new File(args[0]));
        }
        catch (IOException e){
            System.out.println("Unable to open file: " + args[0]);
        }
        word = new String[lineNumber];
        countLineNumbers = new int[lineNumber];
        for (int j = 0; j < lineNumber; j++){
            word[j] = in.nextLine();
            countLineNumbers[j] = j + 1;
        }
  
        mergeSort(word, countLineNumbers, 0, word.length - 1);
        
        for(int h = 1; h < args.length; h++){
            System.out.print(binarySearch(word, countLineNumbers, 0, 
               word.length - 1, args[h]));
        }

        in.close();
        
    }
	
    // mergeSort()
    // sort subarray A[p..r]
    public static void mergeSort(String[] A, int[] lineNumber, int p, int r)
    {
        int q;
        if (p < r){
            q = (p + r) / 2;
			// System.out,println(p+" "+q+" "+r);
            mergeSort(A, lineNumber, p, q);
            mergeSort(A, lineNumber, q + 1, r);
            merge(A, lineNumber, p, q, r);
        }
    }

    // merge()
    // merges sorted subarrays A[p..q] and A[q+1..r]
    public static void merge(String[] A, int[] lineNumber, int p, int q, int r)
    {
        int s1 = q - p + 1;
        int s2 = r - q;
        String[] L = new String[s1];
        String[] R = new String[s2];
        int[] L2 = new int[s1];
        int[] R2 = new int[s2];
        int i, j, k;

        for (i = 0; i<s1; i++){
            L[i] = A[p + i];
            L2[i] = lineNumber[p + i];
        }
        for (j = 0; j < s2; j++){
            R[j] = A[q + j + 1];
            R2[j] = lineNumber[q + j + 1];
        }
		
		i = 0; j = 0;
        for (k = p; k <= r; k++){
            if (i < s1 && j < s2){
                if (L[i].compareTo(R[j]) <  0){
                    A[k] = L[i];
                    lineNumber[k] = L2[i];
                    i++;
                }else{
                    A[k] = R[j];
                    lineNumber[k] = R2[j];
                    j++;
                }
            }else if (i < s1){
                A[k] = L[i];
                lineNumber[k] = L2[i];
                i++;
            }else{
                A[k] = R[j];
                lineNumber[k] = R2[j];
                j++;
            }
        }
    }

    // binarySearch(): uses binary search to search for a value
    // pre: array is not empty
    public static String binarySearch(String[] A, int[] lineNumber, int p, int r, String target){
        int q;
        if (p > r){
            return target + " not found";
        }else{
            q = (p + r)/2;
            if (A[q].compareTo(target) == 0){
                return target + " found on line " + lineNumber[q];
            }else if (A[q].compareTo(target) > 0){
                return binarySearch(A, lineNumber, p, q - 1, target) + "\n";
            }else{
                return binarySearch(A, lineNumber, q + 1, r, target);
            }
        }
    }
}