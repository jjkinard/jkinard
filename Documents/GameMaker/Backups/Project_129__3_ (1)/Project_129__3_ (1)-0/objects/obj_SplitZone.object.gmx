<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_SplitZone</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>colors = ds_list_create();
ds_list_add(colors, 'R');
ds_list_add(colors, 'G');
ds_list_add(colors, 'B');
ds_list_add(colors, 'Y');

index = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>index = checkIndex(index);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if place_meeting(x, y, obj_Bipolar)
{
    global.lockout = false;
    if (global.lockout == false)
    {
        timeline_index = Time_Lockout;
        timeline_position = 0;
        timeline_running = true;
        timeline_loop = false;
        
        if(colors[| index] == 'R')
        {
            if(instance_exists(YellowChange_obj))
            {
                instance_destroy(YellowChange_obj);
                instance_destroy(Yellow_Change);
            }   
            draw_sprite(Red_Change, 0, obj_Bipolar.x, (obj_Bipolar.y - 40));
            instance_create(obj_Bipolar.x, (obj_Bipolar.y - 40), RedChange_obj);
            if(alarm[0] = -1) alarm = 60;            
        }
        else if(colors[| index] == 'G')
        {
            instance_destroy(RedChange_obj);
            instance_destroy(Red_Change);
            draw_sprite(Green_Change, 0, obj_Bipolar.x, (obj_Bipolar.y - 40));
            instance_create(obj_Bipolar.x, (obj_Bipolar.y - 40), GreenChange_obj);
            if(alarm[0] = -1) alarm = 60;    
        }
        else if(colors[| index] == 'B')
        {
            instance_destroy(GreenChange_obj);
            instance_destroy(Green_Change);
            draw_sprite(Blue_Change, 0, obj_Bipolar.x, (obj_Bipolar.y - 40));
            instance_create(obj_Bipolar.x, (obj_Bipolar.y - 40), BlueChange_obj);
            if(alarm[0] = -1) alarm = 60;    
        }
        else if(colors[| index] == 'Y')
        {
            instance_destroy(BlueChange_obj);
            instance_destroy(Blue_Change);
            draw_sprite(Yellow_Change, 0, obj_Bipolar.x, (obj_Bipolar.y - 40));
            instance_create(obj_Bipolar.x, (obj_Bipolar.y - 40), YellowChange_obj);
            if(alarm[0] = -1) alarm = 60; 
        }
    }
}
else if !place_meeting(x, y, obj_Bipolar)
{
    global.lockout = true;
    if(instance_exists(YellowChange_obj))
    {
        instance_destroy(YellowChange_obj);
        instance_destroy(Yellow_Change);
    }
    if(instance_exists(GreenChange_obj))
    {
        instance_destroy(GreenChange_obj);
        instance_destroy(Green_Change);
    }
    if(instance_exists(RedChange_obj))
    {
        instance_destroy(RedChange_obj);
        instance_destroy(Red_Change);
    }
    if(instance_exists(BlueChange_obj))
    {
        instance_destroy(BlueChange_obj);
        instance_destroy(Blue_Change);
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
