<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_SocialAnxiety</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_PlayerParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set fixed rotation
phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Speed = 5;


// Collision detection for speed boost 
if collision_circle(obj_SocialAnxiety.x, obj_SocialAnxiety.y, 150, obj_PlayerParent, false, true)
{
    Speed += 5;
    sprite_index = SA_People;
    image_index = 0;
    image_speed = .7;
}


//caught by door?

if(global.door_isopen == false)
{
    if(place_meeting(phy_position_x,phy_position_y,obj_doorParent))
    {
        door = instance_nearest(self.x, self.y, DoorMat);
        
        phy_position_x = door.x;
        phy_position_y = door.y;
    }
}



if keyboard_check_direct(vk_up)
{
    up_pressed = true;
    phy_position_y -= Speed;
    sprite_index = SA_Walk;
    image_speed = .2;
}
else
    up_pressed = false;
if keyboard_check_direct(vk_down)
{   
    down_pressed = true;
    phy_position_y += Speed;
    sprite_index = SA_Walk;
    image_speed = .2;
                                                                                  
}                
else
    down_pressed = false;
if keyboard_check_direct(vk_left)              
{
    left_pressed = true;
    phy_position_x -= Speed;
    sprite_index = SA_Walk;
    image_speed = .2;
    
}
else
    left_pressed = false;
if keyboard_check_direct(vk_right)
{
    right_pressed = true;
    phy_position_x += Speed;
    sprite_index = SA_Walk;
    image_speed = .2;
}
else
    right_pressed = false;

    //Standing
if ( !(keyboard_check(vk_up)) and !(keyboard_check(vk_down)) and !(keyboard_check(vk_left)) and !(keyboard_check(vk_right)) )
{
    sprite_index = SA_Stand;
    image_speed = 0;
} 
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Wall2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Collision
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Collision
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>64,0</point>
    <point>64,64</point>
    <point>0,64</point>
  </PhysicsShapePoints>
</object>
