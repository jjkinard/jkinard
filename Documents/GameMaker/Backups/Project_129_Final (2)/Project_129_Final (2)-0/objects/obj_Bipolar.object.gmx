<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>BPB_Stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_PlayerParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>friction = 0.5;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set fixed rotation
phy_fixed_rotation = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//List of Colors
colors = ds_list_create();
ds_list_add(colors, 'B');
ds_list_add(colors, 'R');
ds_list_add(colors, 'G');

index = 0;
colorflag = false;

up_pressed = false;
down_pressed = false;
right_pressed = false;
left_pressed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Speed = 5;

//Moving Door Code
if(global.door_isopen == false)
{
    if(place_meeting(phy_position_x,phy_position_y,obj_doorParent))
    {
        door = instance_nearest(self.x, self.y, DoorMat);
        phy_position_x = door.x;
        phy_position_y = door.y;
    }
}

//Color Doors
/*if(sprite_index != BPG_Walking) || (sprite_index != BPG_Stand)
{
    obj_GreenDoor.isOpen = false;
}
if(place_meeting(x, y, obj_GreenDoor))
{
    if(obj_GreenDoor.isOpen == false)
    {
        phy_position_x = phy_position_xprevious;
        phy_position_y = phy_position_yprevious;
    }
}
if(sprite_index == BPG_Walking) || (sprite_index == BPG_Stand)
    obj_GreenDoor.isOpen = true;
*/
//SplitZone code
/*
if (place_meeting(self.x, self.y, obj_SplitZone))
{
    colorflag = true;
    timeline_index = Time_ColorChange;
    timeline_position = 0;
    timeline_running = true;
    timeline_loop = true;
}
if (colorflag == true)
{

    if(colors[| index] == 'B')
    { 
        sprite_index = BPB_Stand;
    }
    else if(colors[| index] == 'R')
    {
        sprite_index = BPR_Stand;   
    }
    else if(colors[| index] == 'G')
    {
       sprite_index = BPG_Stand;
    }
}


if(place_meeting(self.x, self.y, obj_SplitZoneEnd))
{
    colorflag = false;
    timeline_index = Time_ColorChange;
    timeline_running = false;
    index = 0;
}*/


//Collision with triggers
if(place_meeting(self.x, self.y, obj_RedTrigger))
{
    index = 1;
}
if(place_meeting(self.x, self.y, obj_GreenTrigger))
{
    index = 2
}
if(place_meeting(self.x, self.y, obj_BlueTrigger))
{
    index = 0;
}


//collision with crates
if(place_meeting(self.x, self.y, obj_Crate))
{
    phy_position_x = phy_position_xprevious;
    phy_position_y = phy_position_yprevious;
}




//Standing
if ( !(keyboard_check(ord('I'))) and !(keyboard_check(ord('K'))) and !(keyboard_check(ord('J'))) and !(keyboard_check(ord('L'))) )
{
    switch (index)
    {
        case 0:
            sprite_index = BPB_Stand;
            image_speed = 0;
            break;
        case 1:
            sprite_index = BPR_Stand;
            image_speed = 0;
            break;
        case 2:
            sprite_index = BPG_Stand;
            image_speed = 0;
            break;
    }
}


//Movement
if keyboard_check(ord('I'))
{
    up_pressed = true;
    switch (index)
    {
        case 0:
            sprite_index = BPB_Walking;
            image_speed = .2;
            break;
        case 1:
            sprite_index = BPR_Walking
            image_speed = .2;
            break;
        case 2:
            sprite_index = BPG_Walking;
            image_speed = .2;
            break;
    }
    phy_position_y -= Speed;
   
            
}
else
    up_pressed = false;
    
if keyboard_check(ord('K'))
{
    down_pressed = true;    
    switch (index)
    {
        case 0:
            sprite_index = BPB_Walking;
            image_speed = .2;
            break;
        case 1:
            sprite_index = BPR_Walking
            image_speed = .2;
            break;
        case 2:
            sprite_index = BPG_Walking;
            image_speed = .2;
            break;
    }     
    phy_position_y += Speed;
}
else
    down_pressed = false;
    
if keyboard_check(ord('J'))
{
    left_pressed = true;
    switch (index)
    {
        case 0:
            sprite_index = BPB_Walking;
            image_speed = 2;
            break;
        case 1:
            sprite_index = BPR_Walking
            image_speed = 2;
            break;
        case 2:
            sprite_index = BPG_Walking;
            image_speed = 2;
            break;
    }
    phy_position_x -= Speed;   
}
else
    left_pressed = false;
    
if keyboard_check(ord('L'))
{
    right_pressed = true;
    switch (index)
    {
        case 0:
            sprite_index = BPB_Walking;
            break;
        case 1:
            sprite_index = BPR_Walking
            break;
        case 2:
            sprite_index = BPG_Walking;
            break;
    }
    phy_position_x += Speed;
}
else
    right_pressed = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Wall2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Collision
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Collision
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>64,0</point>
    <point>64,64</point>
    <point>0,64</point>
  </PhysicsShapePoints>
</object>
